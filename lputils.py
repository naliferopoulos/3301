# Borrowed from https://github.com/cicada-solvers/GematriaPrimusTool/blob/master/gematria.js
lookup = [
    # [rune, eng1, eng2, value, idx]
    ["\u16A0",'F','','2', 0],
    ["\u16A2",'U','V','3', 1],
    ["\u16A6",'TH','','5', 2],
    ["\u16A9",'O','','7', 3],
    ["\u16B1",'R','','11', 4],
    ["\u16B3",'C','K','13', 5],
    ["\u16B7",'G','','17', 6],
    ["\u16B9",'W','','19', 7],
    ["\u16BB",'H','','23', 8],
    ["\u16BE",'N','','29', 9],
    ["\u16C1",'I','','31', 10],
    ["\u16C4",'J','','37', 11],
    ["\u16C7",'EO','','41', 12],
    ["\u16C8",'P','','43', 13],
    ["\u16C9",'X','','47', 14],
    ["\u16CB",'S','Z','53', 15],
    ["\u16CF",'T','','59', 16],
    ["\u16D2",'B','','61', 17],
    ["\u16D6",'E','','67', 18],
    ["\u16D7",'M','','71', 19],
    ["\u16DA",'L','','73', 20],
    ["\u16DD",'NG','ING','79', 21],
    ["\u16DF",'OE','','83', 22],
    ["\u16DE",'D','','89', 23],
    ["\u16AA",'A','','97', 24],
    ["\u16AB",'AE','','101', 25],
    ["\u16A3",'Y','','103', 26],
    ["\u16E1",'IA','IO','107', 27],
    ["\u16E0",'EA','','109', 28]
]

idx_totient_lookup = [1, 1, 2, 2, 4, 2, 6, 4, 6, 4, 10, 4, 12, 6, 8, 8, 16, 6, 18, 8, 12, 10, 22, 8, 20, 12, 18, 12, 28, 8, 30, 16, 20, 16, 24, 12, 36, 18, 24, 16, 40, 12, 42, 20, 24, 22, 46, 16, 42, 20, 32, 24, 52, 18, 40, 24, 36, 28, 58, 16, 60, 30, 36, 32, 48, 20, 66, 32, 44]
idx_cototient_lookup = [0, 1, 1, 2, 1, 4, 1, 4, 3, 6, 1, 8, 1, 8, 7, 8, 1, 12, 1, 12, 9, 12, 1, 16, 5, 14, 9, 16, 1, 22, 1, 16, 13, 18, 11, 24, 1, 20, 15, 24, 1, 30, 1, 24, 21, 24, 1, 32, 7, 30, 19, 28, 1, 36, 15, 32, 21, 30, 1, 44, 1, 32, 27, 32, 17, 46, 1, 36, 25, 46, 1, 48, 1, 38, 35, 40, 17, 54, 1, 48, 27]
primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271]

### Batch Lookups ###
def lookup_with_rune(rune):
    for res in lookup:
        if res[0] == rune:
            eng = ''
            if res[2] == '':
                eng = res[1]
            else:
                eng = '[' + res[1] + '/' + res[2] + ']'
            return (eng, res[4])

    print ("Failed to find rune '" + rune + "'")
    assert(False)

def lookup_with_english(eng):
    for res in lookup:
        if res[1] == eng or res[2] == eng:
            return (res[0], res[4])

    print ("Failed to find letter '" + eng + "'")
    assert(False) 

def lookup_with_index(idx):
    for res in lookup:
        if res[4] == idx:
            eng = ''
            if res[2] == '':
                eng = res[1]
            else:
                eng = '[' + res[1] + '/' + res[2] + ']'
            return (res[0], eng)

    print ("Failed to find index '" + str(idx) + "'")
    assert(False)

### Specific Lookups ###
def rune_to_eng(rune):
    eng, idx = lookup_with_rune(rune)
    return eng

def rune_to_idx(rune):
    eng, idx = lookup_with_rune(rune)
    return idx

def eng_to_rune(eng):
    rune,idx = lookup_with_english(eng)
    return rune

def eng_to_idx(eng):
    rune,idx = lookup_with_english(eng)
    return idx

def idx_to_rune(idx):
    rune, eng = lookup_with_index(idx)
    return rune

def idx_to_eng(idx):
    rune, eng = lookup_with_index(idx)
    return eng

### Conversions ###
def rune_to_english(arr):
    eng = ''

    for i in arr:
        eng += rune_to_eng(i)
    
    return eng
    
def rune_to_index(arr):
    idx = []

    for i in arr:
        idx.append(rune_to_idx(i))

    return idx

def english_to_rune(arr):
    rune = ''

    for i in arr:
        rune += eng_to_rune(i)

    return rune

def english_to_index(arr):
    idx = []

    for i in arr:
        idx.append(eng_to_idx(i))
    
    return idx

def index_to_english(arr):
    eng = ''

    for i in arr:
        eng += idx_to_eng(i)

    return eng

def index_to_rune(arr):
    rune = ''

    for i in arr:
        rune += idx_to_rune(i)

    return rune

# Operations
def rot(arr, rot):
    for i in range(len(arr)):
        arr[i] = (arr[i] + rot) % 29

    return arr

def rot_by_totient_of_index(arr):
    res = []

    for i in arr:
        offset = idx_totient_lookup[i]
        res.append((i + offset) % 29)
    
    return res

def rot_by_inverse_of_totient_of_prime_at_position(arr, skip=0):
    res = []

    for i in range(len(arr)):
        res.append((arr[i] - (primes[i+skip] - 1)) % 29)

    return res

def rot_by_inverse_of_totient_of_totient_of_prime_at_position(arr):
    res = []

    for i in range(len(arr)):
        try:
            res.append((arr[i] - idx_totient_lookup[(primes[arr[i]] - 1)]) % 29)
        except:
            pass
    
    return res

def atbash(arr):
    res = []

    for i in arr:
        res.append(28 - i)
    
    return res

def vigenere(arr, key, skip_list=[]):
    key_idx = english_to_index(key)
    key_pos = 0
    res = []

    for i in range(len(arr)):
        if i in skip_list:
            continue
        res.append((arr[i] - key_idx[key_pos % len(key)]) % 29)
        key_pos = key_pos + 1
    
    return res

def cototient(arr):
    res = []

    for i in range(len(arr)):
        res.append(arr[i] - idx_cototient_lookup[arr[i]])

    return res

# Solutions
def solve_a_warning():
    warning = [4, 21, 4, 24, 19, 7, 11, 10, 8, 18, 10, 27, 10, 19, 25, 26, 7, 28, 24, 25, 9, 26, 18, 13, 11, 25, 25, 23, 10, 14, 23, 10, 15, 12, 21, 20, 4, 12, 2, 25, 27, 23, 19, 25, 21, 12, 25, 11, 10, 12, 24, 27, 10, 12, 10, 13, 12, 26, 10, 23, 19, 25, 21, 8, 10, 5, 22, 10, 28, 18, 19, 5, 2, 25, 27, 24, 12, 24, 27, 26, 10, 14, 15, 10, 24, 18, 10, 19, 23, 10, 2, 25, 27, 24, 5, 0, 26, 5, 25, 19, 25, 12, 10, 5, 18, 12, 25, 24, 23, 20, 4, 7, 10, 26, 18, 13, 11, 25, 25, 23, 25, 24, 26, 10, 9, 10, 13, 13, 4, 22, 10, 23, 25, 19, 12, 4, 18, 19, 10, 5, 21, 18, 26, 18, 19, 10, 18, 26, 10, 24, 26, 10, 21, 25, 24, 5, 13, 25, 24, 26, 10, 18, 24, 19, 27, 9, 11, 10, 24, 13, 28, 25, 24, 4, 8, 8, 18, 13, 13, 4, 23, 24, 10, 5]

    print(index_to_english(atbash(warning)))

def solve_welcome():
    welcome = [1, 28, 21, 15, 12, 0, 5, 4, 12, 1, 6, 13, 28, 28, 0, 7, 14, 16, 5, 20, 28, 26, 19, 28, 12, 16, 5, 9, 25, 21, 19, 27, 27, 19, 19, 7, 25, 13, 23, 21, 27, 4, 3, 28, 27, 19, 10, 0, 0, 18, 1, 21, 12, 1, 25, 26, 13, 4, 25, 10, 13, 25, 5, 25, 25, 9, 7, 17, 14, 19, 23, 4, 27, 10, 0, 13, 5, 12, 12, 25, 5, 4, 2, 13, 0, 11, 19, 3, 12, 5, 7, 27, 17, 25, 7, 17, 28, 20, 15, 4, 26, 11, 25, 4, 19, 5, 2, 12, 25, 16, 5, 13, 7, 19, 6, 12, 5, 21, 13, 1, 12, 5, 4, 18, 7, 27, 13, 10, 17, 26, 17, 14, 0, 20, 10, 4, 4, 19, 5, 6, 17, 26, 4, 5, 0, 1, 2, 13, 27, 11, 7, 16, 0, 28, 11, 6, 17, 25, 2, 0, 0, 28, 13, 2, 13, 0, 24, 14, 11, 19, 18, 13, 21, 15, 3, 15, 19, 7, 12, 11, 20, 7, 14, 1, 2, 25, 7, 19, 2, 23, 26, 11, 5, 15, 27, 14, 3, 21, 4, 19, 17, 7, 4, 19, 10, 23, 26, 11, 5, 14, 8, 1, 26, 13, 20, 11, 21, 26, 19, 0, 11, 13, 12, 1, 27, 7, 12, 11, 23, 7, 14, 1, 24, 20, 24, 15, 19, 27, 12, 14, 25, 19, 27, 19, 10, 13, 26, 25, 19, 1, 0, 19, 26, 26, 12, 25, 14, 4, 11, 15, 18, 18, 7, 9, 23, 11, 1, 15, 14, 26, 16, 18, 16, 19, 12, 4, 26, 23, 15, 9, 18, 25, 23, 27, 13, 17, 1, 9, 28, 21, 11, 27, 25, 11, 6, 17, 13, 2, 14, 13, 9, 7, 7, 10, 20, 19, 25, 20, 13, 17, 1, 3, 28, 27, 4, 27, 28, 0, 4, 4, 12, 11, 19, 4, 19, 10, 23, 26, 11, 8, 20, 0, 1, 11, 1, 27, 20, 2, 28, 12, 11, 3, 12, 4, 4, 19, 1, 19, 15, 5, 28, 12, 20, 10, 25, 25, 5, 20, 7, 10, 20, 16, 13, 18, 1, 13, 28, 27, 13, 2, 16, 17, 16, 19, 18, 1, 20, 3, 20, 18, 12, 11, 13, 1, 28, 20, 5, 6, 28, 6, 15, 27, 16, 19, 1, 17, 19, 4, 2, 0, 13, 7, 4, 11, 4, 14, 5, 21, 11, 28, 22, 11, 18, 26, 19, 23, 26, 11, 5, 25, 27, 1, 0, 13, 0, 24, 5, 5, 28, 4, 1, 11, 4, 24, 19, 17, 13, 6, 13, 17, 1, 9, 28, 21, 0, 9, 14, 18, 26, 6, 10, 28, 21, 1, 19, 16, 5, 6, 28, 28, 11, 25, 17, 13, 7, 23, 0, 26, 14, 25, 1, 0, 12, 11, 13, 14, 20, 2, 28, 24, 20, 2, 5, 26, 1, 27, 5, 18, 20, 25, 12, 10, 14, 2, 15, 25, 8, 25, 2, 26, 0, 20, 5, 18, 4, 13, 0, 24, 14, 4, 17, 18, 25, 5, 17, 0]

    print(index_to_english(vigenere(welcome, "DIVINITY", skip_list=[62, 102, 115, 181, 217, 218, 333, 566, 596, 625, 689])))

def solve_koan_1():
    koan1 = [7, 26, 28, 7, 22, 7, 12, 7, 22, 8, 13, 26, 21, 8, 13, 8, 15, 28, 25, 28, 7, 22, 8, 16, 15, 1, 8, 5, 24, 21, 0, 7, 12, 7, 16, 15, 13, 27, 23, 13, 24, 13, 22, 15, 15, 28, 0, 13, 8, 28, 28, 27, 28, 2, 0, 13, 12, 7, 16, 15, 13, 27, 24, 23, 28, 7, 27, 13, 5, 28, 1, 24, 23, 28, 24, 21, 16, 23, 13, 16, 15, 28, 16, 15, 1, 8, 5, 23, 13, 27, 13, 7, 16, 26, 13, 8, 0, 13, 12, 7, 16, 15, 13, 27, 0, 13, 16, 15, 1, 8, 13, 22, 15, 15, 28, 11, 8, 0, 13, 12, 7, 16, 15, 13, 27, 23, 21, 16, 22, 7, 12, 13, 0, 7, 15, 21, 16, 22, 28, 15, 24, 23, 28, 5, 28, 1, 7, 27, 13, 0, 7, 15, 21, 16, 28, 22, 11, 5, 24, 23, 7, 15, 5, 28, 1, 7, 27, 13, 26, 7, 11, 11, 13, 8, 24, 23, 28, 7, 27, 13, 5, 28, 1, 24, 23, 28, 24, 21, 16, 23, 13, 16, 15, 28, 16, 15, 1, 8, 5, 23, 13, 27, 13, 23, 13, 7, 16, 26, 13, 8, 7, 25, 7, 21, 22, 0, 13, 12, 7, 22, 0, 28, 1, 25, 23, 15, 2, 28, 27, 7, 12, 28, 12, 13, 22, 15, 7, 22, 8, 27, 13, 18, 11, 21, 13, 8, 21, 7, 12, 7, 18, 27, 28, 2, 13, 16, 16, 28, 27, 0, 7, 15, 21, 16, 24, 23, 7, 15, 5, 28, 1, 8, 28, 22, 28, 15, 24, 23, 28, 5, 28, 1, 7, 27, 13, 27, 13, 18, 11, 21, 13, 8, 0, 13, 12, 7, 16, 15, 13, 27, 24, 23, 28, 7, 27, 13, 5, 28, 1, 24, 23, 28, 24, 21, 16, 23, 13, 16, 15, 28, 16, 15, 1, 8, 5, 23, 13, 27, 13, 26, 28, 22, 2, 1, 16, 13, 8, 0, 13, 12, 7, 22, 0, 28, 1, 25, 23, 15, 16, 28, 12, 13, 12, 28, 27, 13, 2, 21, 22, 7, 11, 11, 5, 23, 13, 7, 22, 16, 24, 13, 27, 13, 8, 21, 7, 12, 7, 23, 1, 12, 7, 22, 14, 13, 10, 0, 7, 15, 21, 16, 28, 22, 11, 5, 5, 28, 1, 27, 16, 18, 13, 26, 21, 13, 16, 22, 28, 15, 24, 23, 28, 5, 28, 1, 7, 27, 13, 24, 23, 28, 7, 27, 13, 5, 28, 1, 24, 23, 28, 24, 21, 16, 23, 13, 16, 15, 28, 16, 15, 1, 8, 5, 23, 13, 27, 13, 7, 16, 26, 13, 8, 0, 13, 12, 7, 16, 15, 13, 27, 7, 25, 7, 21, 22, 7, 2, 15, 13, 27, 7, 12, 28, 12, 13, 22, 15, 28, 2, 0, 28, 1, 25, 23, 15, 0, 13, 18, 27, 28, 2, 13, 16, 16, 28, 27, 27, 13, 18, 11, 21, 13, 8, 21, 7, 12, 7, 26, 28, 22, 16, 26, 4, 1, 16, 22, 13, 16, 16, 21, 22, 23, 7, 14, 21, 15, 10, 7, 22, 7, 27, 14, 21, 15, 27, 7, 27, 5, 14, 28, 8, 5, 0, 7, 15, 21, 16, 12, 13, 27, 13, 11, 5, 24, 23, 7, 15, 5, 28, 1, 7, 27, 13, 22, 28, 15, 24, 23, 28, 5, 28, 1, 7, 27, 13, 24, 23, 28, 7, 27, 13, 5, 28, 1, 24, 23, 28, 24, 21, 16, 23, 13, 16, 15, 28, 16, 15, 1, 8, 5, 23, 13, 27, 13, 0, 13, 12, 7, 22, 24, 7, 16, 25, 13, 15, 15, 10, 21, 27, 27, 21, 15, 7, 15, 13, 8, 21, 7, 12, 23, 13, 16, 15, 7, 27, 15, 13, 8, 14, 1, 15, 23, 13, 26, 28, 1, 11, 8, 22, 28, 15, 0, 21, 22, 26, 28, 2, 7, 22, 5, 0, 10, 13, 11, 16, 13, 15, 28, 16, 7, 5, 16, 28, 23, 13, 15, 27, 7, 21, 11, 13, 8, 28, 2, 2, 7, 2, 15, 13, 27, 7, 11, 28, 10, 18, 7, 1, 16, 13, 0, 13, 12, 7, 16, 15, 13, 27, 27, 13, 18, 11, 21, 13, 8, 0, 13, 22, 5, 28, 1, 7, 27, 13, 24, 13, 11, 26, 28, 12, 13, 15, 28, 26, 28, 12, 13, 16, 15, 1, 8, 5, 1, 7, 22, 21, 22, 16, 15, 27, 1, 26, 15, 4, 22, 8, 28, 2, 28, 1, 27, 1, 22, 27, 3, 16, 28, 22, 7, 14, 11, 13, 0, 10, 16, 3, 26, 23, 8, 7, 5, ]

    print(index_to_english(rot(atbash(koan1), 3)))

def solve_koan_2():
    koan2 = [24, 15, 7, 24, 10, 13, 1, 22, 25, 13, 0, 18, 4, 15, 13, 13, 2, 19, 9, 24, 4, 20, 7, 13, 18, 3, 13, 1, 28, 10, 10, 8, 23, 20, 22, 28, 11, 18, 28, 10, 25, 6, 18, 2, 22, 10, 23, 22, 21, 0, 11, 18, 23, 10, 14, 9, 1, 20, 0, 8, 4, 7, 13, 23, 27, 8, 7, 15, 5, 14, 23, 8, 27, 18, 27, 28, 4, 14, 18, 12, 17, 7, 28, 15, 17, 20, 23, 7, 13, 5, 25, 3, 7, 14, 23, 24, 24, 11, 28, 7, 26, 28, 5, 11, 24, 5, 19, 9, 13, 16, 3, 8, 19, 13, 19, 5, 27, 4, 4, 24, 20, 27, 10, 17, 0, 15, 13, 5, 21, 19, 5, 7, 10, 19, 19, 10, 24, 8, 26, 21, 5, 22, 17, 28, 12, 10, 4, 7, 9, 17, 27, 24, 19, 22, 13, 10, 3, 28, 5, 28, 14, 9, 20, 16, 8, 17, 27, 20, 12, 1, 24, 8, 26, 6, 18, 16, 6, 1, 12, 22, 27, 25, 24, 27, 23, 18, 22, 4, 25, 0, 15, 7, 27, 26, 19, 15, 26, 24, 19, 27, 16, 4, 6, 18, 9, 24, 20, 27, 19, 13, 15, 26, 22, 4, 3, 8, 19, 13, 19, 5, 27, 4, 4, 16, 13, 17, 13, 19, 13, 2, 7, 19, 5, 10, 23, 7, 9, 26, 28, 9, 24, 5, 24, 28, 27, 20, 27, 1, 21, 10, 15, 22, 2, 25, 6, 11, 19, 19, 5, 24, 24, 28, 23, 7, 7, 1, 9, 14, 1, 7, 13, 21, 10, 3, 28, 5, 28, 14, 9, 27, 22, 1, 22, 12, 17, 3, 10, 4, 2, 28, 14, 24, 10, 13, 2, 7, 19, 5, 10, 23, 7, 9, 26, 19, 7, 19, 23, 18, 7, 13, 9, 19, 6, 26, 16, 28, 13, 18, 24]

    print(index_to_english(vigenere(koan2, "FIRFUMFERENFE", [68, 81])))

def attempt_page_54():
    page54 = [24, 19, 21, 23, 27, 2, 14, 10, 19, 27, 23, 13, 21, 1, 7, 24, 19, 16, 24, 21, 21, 2, 27, 7, 15, 8, 10, 5, 25, 13, 25, 6, 3, 19, 10, 24, 18, 3, 16, 7, 3, 0, 26, 1, 16, 11, 2, 11, 28, 18, 5, 9, 28, 5, 28, 18, 4, 3, 1, 14, 23, 7, 8, 17, 21, 0, 24, 5, 11, 1, 3, 11, 27, 28, 10, 20, 6, 8, 17, 1, 11, 14, 24, 5, 7, 27, 19, 3, 13, 26, 23, 27, 20, 13, 12, 10, 2, 4, 26, 6, 19, 14, 22, 6, 15, 19, 13, 11, 22, 23, 22, 16, 27, 22, 16, 21, 10, 19, 21, 26, 24, 25, 21, 4, 26, 11, 9, 20, 1, 14, 17, 8, 13, 11, 3, 28, 6, 25, 7, 14, 15, 23, 5, 1, 16, 22, 8, 12, 9, 13, 16, 28, 26, 17, 1, 6, 6, 24, 12, 9, 6, 3, 18, 20, 19, 17, 2, 26, 27, 22, 12, 26, 19, 5, 22, 2, 18, 20, 4, 12, 13, 4, 23, 26, 14, 23, 21, 26, 13, 15, 18, 14, 7, 5, 6, 0, 23, 4, 18, 23, 18, 7, 3, 12, 22, 8, 3, 22, 17, 15, 8, 28, 24, 5, 10, 19, 14, 11, 19, 18, 19, 20, 6, 3, 16, 2, 14, 18, 28, 4, 6, 26]

    print(index_to_english(rot_by_inverse_of_totient_of_totient_of_prime_at_position(page54)))

attempt_page_54()